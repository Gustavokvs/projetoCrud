package controller;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class GerenciadorConexao {

    private static final String URL = "jdbc:mysql://127.0.0.1:3306/livraria";
    private static final String USER = "root";
    private static final String PASSWORD = "root";

    private Connection conexao;

    // Construtor que estabelece a conexão com o banco
    public GerenciadorConexao() {
        try {
            conexao = DriverManager.getConnection(URL, USER, PASSWORD);
            if (conexao == null) {
                throw new SQLException("Falha na conexão com o banco de dados.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    // Método que retorna a conexão
    public static Connection obterConexao() {
        try {
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao obter conexão: " + e.getMessage());
            return null;
        }
    }

    // Método para preparar o comando SQL
    public PreparedStatement prepararComando(String sql) {
        PreparedStatement comando = null;
        try {
            comando = conexao.prepareStatement(sql);
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "Erro ao preparar comando: " + erro);
        }
        if (comando == null) {
            JOptionPane.showMessageDialog(null, "Erro ao preparar comando: PreparedStatement é nulo.");
        }
        return comando;
    }

    // Método modificado para preparar o comando com retorno de chaves geradas
    public PreparedStatement prepararComando(String sql, int autoGeneratedKeys) {
        PreparedStatement comando = null;
        try {
            comando = conexao.prepareStatement(sql, autoGeneratedKeys);
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "Erro ao preparar comando com chaves geradas: " + erro);
        }
        return comando;
    }

    // Método para fechar a conexão
    public void fecharConexao() {
        try {
            if (conexao != null) {
                conexao.close();
            }
        } catch (SQLException erro) {
            Logger.getLogger(GerenciadorConexao.class.getName()).log(Level.SEVERE, null, erro);
        }
    }

    // Fechar a conexão e o comando PreparedStatement
    public void fecharConexao(PreparedStatement comando) {
        fecharConexao();
        try {
            if (comando != null) {
                comando.close();
            }
        } catch (SQLException erro) {
            Logger.getLogger(GerenciadorConexao.class.getName()).log(Level.SEVERE, null, erro);
        }
    }

    // Fechar a conexão, o comando PreparedStatement e o ResultSet
    public void fecharConexao(PreparedStatement comando, ResultSet resultado) {
        fecharConexao(comando);
        try {
            if (resultado != null) {
                resultado.close();
            }
        } catch (SQLException erro) {
            Logger.getLogger(GerenciadorConexao.class.getName()).log(Level.SEVERE, null, erro);
        }
    }

    // Inicia uma transação
    public void abrirTransacao() throws SQLException {
        conexao.setAutoCommit(false);
    }

    // Confirma a transação
    public void confirmarTransacao() throws SQLException {
        conexao.commit();
    }

    // Cancela a transação
    public void cancelarTransacao() {
        try {
            conexao.rollback();
        } catch (SQLException erro) {
            Logger.getLogger(GerenciadorConexao.class.getName()).log(Level.SEVERE, null, erro);
        }
    }

    // Retorna a conexão ativa
    public Connection getConexao() {
        return conexao;
    }
}
