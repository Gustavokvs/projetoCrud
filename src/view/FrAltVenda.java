/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import javax.swing.JList;
import javax.swing.JLabel;

import javax.swing.JPanel;
import controller.ClienteController;
import controller.LivroController;
import controller.VendaController;
import java.awt.Component;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import model.Cliente;
import model.Livro;
import model.Venda;

/**
 *
 * @author gusta
 */
public class FrAltVenda extends javax.swing.JDialog {

    private int idVenda; // variável para armazenar o ID da venda

    public FrAltVenda(java.awt.Frame parent, boolean modal, int idVenda) {
        super(parent, modal);
        this.idVenda = idVenda;
        initComponents();
        jPanelLivros.setLayout(new java.awt.GridLayout(0, 1, 10, 10));
        jPanel1.add(jPanelLivros, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 700, 250));

        preencherCombos();
        carregarVenda();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbData = new javax.swing.JLabel();
        lbCliente = new javax.swing.JLabel();
        edtData = new javax.swing.JTextField();
        lbLivro = new javax.swing.JLabel();
        btmSalvar = new javax.swing.JButton();
        btmCancelar = new javax.swing.JButton();
        comboLivro = new javax.swing.JComboBox<>();
        comboQuant = new javax.swing.JComboBox<>();
        comboCliente = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbData.setText("Data");
        jPanel1.add(lbData, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, -1, -1));

        lbCliente.setText("Cliente");
        jPanel1.add(lbCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, -1));
        jPanel1.add(edtData, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 92, -1));

        lbLivro.setText("Livro");
        jPanel1.add(lbLivro, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 130, -1, -1));

        btmSalvar.setText("Salvar");
        btmSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(btmSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 480, -1, -1));

        btmCancelar.setText("Cancelar");
        btmCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btmCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 480, -1, -1));

        comboLivro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(comboLivro, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, -1, -1));

        comboQuant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(comboQuant, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 160, -1, -1));

        comboCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(comboCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btmSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmSalvarActionPerformed
        salvarVenda();

    }//GEN-LAST:event_btmSalvarActionPerformed

    private void btmCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmCancelarActionPerformed
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btmCancelarActionPerformed

    private javax.swing.JPanel jPanelLivros = new javax.swing.JPanel();

private void preencherCombos() {
    // Preencher apenas os comboBox existentes
    preencherComboBox(comboCliente, new ClienteController().listarTodos());
    List<Livro> livros = new LivroController().listarTodos();
    preencherComboBox(comboLivro, livros);  // Agora o comboLivro irá conter objetos Livro.

    // Caso haja livros no combo, selecionar o primeiro automaticamente
    if (!livros.isEmpty()) {
        comboLivro.setSelectedIndex(0);  // Selecionar o primeiro livro
    }

    comboQuant.removeAllItems(); // limpar quantidades anteriores
    for (int i = 1; i <= 10; i++) {
        comboQuant.addItem(String.valueOf(i)); // Converte o int para String
    }
}

    private void preencherComboBox(JComboBox comboBox, List<?> lista) {
        comboBox.removeAllItems();
        for (Object item : lista) {
            comboBox.addItem(item);
        }
    }

    private void adicionarLivroEQuantidade(Livro livro, Integer quant) {
        JPanel painelLivros = new JPanel();

        // Usar o combo já existente para livro
        JComboBox<Livro> comboLivros = new JComboBox<>();
        // Preencher o comboLivros com objetos Livro
        JComboBox<Integer> comboQuant = new JComboBox<>(); // Inicialização do comboQuant

        // Adicionando o livro ao JComboBox
        comboLivros.addItem(livro);
        comboLivros.setSelectedItem(livro);

        // Preenchendo o comboQuant com valores de 1 a 10
        for (int i = 1; i <= 10; i++) {
            comboQuant.addItem(i);
        }
        comboQuant.setSelectedItem(quant);

        painelLivros.add(comboLivros);
        painelLivros.add(comboQuant);

        jPanelLivros.add(painelLivros);
        jPanelLivros.revalidate();
        jPanelLivros.repaint();
    }

private void carregarVenda() {
    VendaController vendaController = new VendaController();
    Venda venda = vendaController.getVendaPorId(idVenda);

    if (venda != null) {
        // Preenchendo a data da venda
        edtData.setText(venda.getDataVenda().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));

        // Selecionar o cliente corretamente
        Cliente clienteVenda = null;
        for (int i = 0; i < comboCliente.getItemCount(); i++) {
            Cliente cliente = (Cliente) comboCliente.getItemAt(i);
            if (cliente.getId() == venda.getIdCliente()) {
                clienteVenda = cliente;
                break;
            }
        }

        if (clienteVenda != null) {
            comboCliente.setSelectedItem(clienteVenda);
        } else {
            JOptionPane.showMessageDialog(this, "Cliente não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
        }

        // Selecionar o primeiro livro da venda
        List<Livro> livrosNaVenda = new ArrayList<>(venda.getLivrosVendidos().keySet());
        if (!livrosNaVenda.isEmpty()) {
            Livro primeiroLivro = livrosNaVenda.get(0);
            // Selecionando o primeiro livro do combo
            for (int i = 0; i < comboLivro.getItemCount(); i++) {
                Livro livroCombo = (Livro) comboLivro.getItemAt(i);
                if (livroCombo.getId() == primeiroLivro.getId()) {
                    comboLivro.setSelectedIndex(i);
                    break;
                }
            }
        }

        // Adicionando livros e quantidades ao painel
        for (Map.Entry<Livro, Integer> entry : venda.getLivrosVendidos().entrySet()) {
            Livro livro = entry.getKey();
            Integer quantidade = entry.getValue();

            // Evitar adicionar o primeiro livro novamente
            if (!livrosNaVenda.get(0).equals(livro)) {
                adicionarLivroEQuantidade(livro, quantidade);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Venda não encontrada!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

    private void salvarVenda() {
        try {
            Cliente cliente = (Cliente) comboCliente.getSelectedItem();
            if (cliente == null) {
                JOptionPane.showMessageDialog(this, "Selecione um cliente.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String dataStr = edtData.getText().trim();
            LocalDate dataVenda = LocalDate.parse(dataStr, DateTimeFormatter.ofPattern("dd/MM/yyyy"));

            Map<Livro, Integer> livrosVendidos = new HashMap<>();
            for (Component comp : jPanelLivros.getComponents()) {
                if (comp instanceof JPanel) {
                    JPanel painel = (JPanel) comp;
                    JComboBox<Livro> comboLivros = (JComboBox<Livro>) painel.getComponent(0);
                    JComboBox<Integer> comboQuant = (JComboBox<Integer>) painel.getComponent(1);

                    Livro livro = (Livro) comboLivros.getSelectedItem();
                    Integer quantidade = (Integer) comboQuant.getSelectedItem();

                    if (livro != null && quantidade != null) {
                        livrosVendidos.put(livro, quantidade);
                    }
                }
            }

            if (livrosVendidos.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Adicione pelo menos um livro à venda.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Venda venda = new Venda(idVenda, cliente, livrosVendidos, dataVenda);
            VendaController vendaController = new VendaController();
            vendaController.alterarVenda(venda);

            JOptionPane.showMessageDialog(this, "Venda atualizada com sucesso.");
            dispose();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar a venda: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private Cliente buscarClientePorId(int id) {
        // Lógica para buscar o cliente pelo ID, pode ser feito via controlador ou banco de dados
        // Exemplo de implementação fictícia:
        ClienteController clienteController = new ClienteController();
        return clienteController.buscarPorId(id);
    }

    // Método fictício para buscar livro por título
    private Livro buscarLivroPorTitulo(String titulo) {
        // Lógica de busca pelo título (pode ser feito via controlador ou diretamente no banco)
        // Este é apenas um exemplo
        return new Livro();  // Retorna um novo livro, a lógica de busca precisa ser implementada
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrAltVenda dialog = new FrAltVenda(new javax.swing.JFrame(), true, 1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btmCancelar;
    private javax.swing.JButton btmSalvar;
    private javax.swing.JComboBox<String> comboCliente;
    private javax.swing.JComboBox<String> comboLivro;
    private javax.swing.JComboBox<String> comboQuant;
    private javax.swing.JTextField edtData;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbCliente;
    private javax.swing.JLabel lbData;
    private javax.swing.JLabel lbLivro;
    // End of variables declaration//GEN-END:variables
}
